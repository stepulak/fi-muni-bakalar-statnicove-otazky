#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section*
Funkcionální programování
\end_layout

\begin_layout Subsubsection*
Pojmy
\end_layout

\begin_layout Itemize

\series bold
Funkcionální paradigma
\series default
 - deklarativní paradigma, které využívá ke svému zápisu výrazy a funkce.
 Nejdůležitejšími prvky jsou tedy funkce a jejich aplikace na různé argumenty.
 Celý program je tedy reprezetován jedním výrazem.
 Výpočet probíhá úpravou a zjednodušováním výrazu až na triviální výraz,
 který již dále nejde zjednodušit.
 Příklady funkcionálních jazyků: Haskell, F#, Erlang, Ocaml atd.
\end_layout

\begin_layout Itemize

\series bold
Deklarativní paradigma
\series default
 - popisuje, jak má výsledek vypadat, ne jak se počítá (imperativní paradigma).
 Deklarativní zápis algoritmu již svým způsobem reprezentuje výsledek algoritmu.
\end_layout

\begin_layout Itemize

\series bold
Výraz
\series default
 - validní část (podčást) funkcionálního výrazu.
 Obsahuje konstanty, proměnné, funkce a lokální definice.
\end_layout

\begin_layout Itemize

\series bold
Redukční krok
\series default
 - je elementární úprava výrazu, kdy se určitý jeho podvýraz nahradí zjednodušen
ým podvýrazem.
 Upravovaný podvýraz (redex) má tvar aplikace funkce na parametry, upravený
 podvýraz má tvar pravé strany definice této funkce.
\end_layout

\begin_layout Itemize

\series bold
Redukční strategie
\series default
 - je předpis, který určuje, jaký podvýraz se bude zjednodušovat (nahrazovat)
 podvýrazem novým v následujícím redukčním kroku.
\end_layout

\begin_layout Subsection*
Typy redukčních strategií
\end_layout

\begin_layout Subsubsection*
Striktní redukce
\end_layout

\begin_layout Standard
Máme výraz F X, striktní redukce neprve upraví výraz X a poté se přesune
 na celý výraz F X.
 Úprava výrazu tedy probíhá zevnitř.
 Podle 
\series bold
věty o perpetualitě
\series default
 striktní redukce je nejméně bezpečná (co se týče zacyklení), ale pokud
 striktní redukce necyklí, tak necyklí již žádná jiná redukce.
 Tato strategie se využívá v programovacím jazyce Lisp.
\end_layout

\begin_layout Standard
Příklad:
\end_layout

\begin_layout Standard
Máme funkci 
\begin_inset Formula $sq\,x=x*x$
\end_inset

 a chceme zjednodušit výraz 
\begin_inset Formula $sq(sq\,3))\rightsquigarrow sq(3*3)\rightsquigarrow sq(9)\rightsquigarrow9*9\rightsquigarrow81$
\end_inset

 
\end_layout

\begin_layout Subsubsection*
Normální redukce
\end_layout

\begin_layout Standard
Máme výraz F X, normální redukce upravuje celý výraz F X.
 Pokud již neexistuje další možnost úpravy, může upravit i výraz X, ale
 jen do té doby, dokud nebude možné pokračovat v úpravě F X.
 Podle
\series bold
 věty o normalizaci
\series default
 platí, že normální redukce je z hlediska zacyklení nejbezpečnější, tudíž
 pokud cyklí pro normální redukci, bude cyklit pro všechny ostatní redukce.
 Pokud necyklí s některou další redukční strategií, necyklí ani s normální
 redukcí.
\end_layout

\begin_layout Standard
Příklad:
\end_layout

\begin_layout Standard
Máme funkci 
\begin_inset Formula $sq\,x=x*x$
\end_inset

 a chceme zjednodušit výraz 
\begin_inset Formula $sq(sq\,3)\rightsquigarrow sq\,3*sq\,3\rightsquigarrow(3*3)*sq\,3\rightsquigarrow9*sq\,3\rightsquigarrow9*(3*3)\rightsquigarrow9*9\rightsquigarrow81$
\end_inset


\end_layout

\begin_layout Subsubsection*
Líná redukce
\end_layout

\begin_layout Standard
Líná redukce je podobná normální redukci, s tím rozdílem, že si pamatuje
 již dříve upravované výrazy, a tak je rovnou nahradí výsledkem.
 Díky tomu je líná redukce rychlejší variantou normální redukce.
 Tato redukční strategie se využívá v programovacím jazyce Haskell.
\end_layout

\begin_layout Standard
Příklad:
\end_layout

\begin_layout Standard
Máme funkci 
\begin_inset Formula $sq\,x=x*x$
\end_inset

 a chceme zjednodušit výraz 
\begin_inset Formula $sq(sq\,3)\rightsquigarrow sq\,3*sq\,3\rightsquigarrow(3*3)*sq\,3\rightsquigarrow9*sq\,3\rightsquigarrow9*9\rightsquigarrow81$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Díky líné redukci můžeme v Haskellu tvořit funkce, které se 
\begin_inset Quotes eld
\end_inset

zdánlivě
\begin_inset Quotes erd
\end_inset

 vykonají s exponenciální časovou složitostí, nicméně díky líné redukci
 je jejich výpočet lineární.
 Například funkce pro výpočet n-tého Fibonacciho čísla:
\end_layout

\begin_layout Quotation
fibonacci :: Integer -> Integer
\end_layout

\begin_layout Quotation
fibonacci 0 = 0
\end_layout

\begin_layout Quotation
fibonacci 1 = 1
\end_layout

\begin_layout Quotation
fibonacci n = fibonacci (n-2) + fibonacci (n-1)
\end_layout

\begin_layout Subsubsection*
Eta redukce
\end_layout

\begin_layout Standard
Je založena na principu odstranění (v principu) redundantních podvýrazů
 na levé i pravé straně výrazu.
\end_layout

\begin_layout Standard
Příklad (v jazyce Haskell):
\end_layout

\begin_layout Quotation
plus :: Integer -> Integer -> Integer
\end_layout

\begin_layout Quotation
plus x y = (+) x y
\end_layout

\begin_layout Standard
Je ekvivalentní s funkcí:
\end_layout

\begin_layout Quotation
plus :: Integer -> Integer -> Integer
\end_layout

\begin_layout Quotation
plus = (+)
\end_layout

\begin_layout Subsection*
Vlastnosti redukčních strategií
\end_layout

\begin_layout Subsubsection*
Church-Rosseova věta
\end_layout

\begin_layout Standard
Tato věta pojednává o ekvivalenci různých redukčních strategií.
 Máme dvě rozdílne redukční strategie X, Y (jedna je méně bezpečná než druhá).
 Pokud obě při úpravě výrazu nezacyklí a skončí v konečném čase (časy i
 postupy se mohou lišit), výsledek úprav obou strategií je stejný.
\end_layout

\begin_layout Subsubsection*
Věta o perpetualitě
\end_layout

\begin_layout Standard
Věta o perpetualitě říká, že striktní strategie je nejnebezpečnější.
 Z toho plyne, že pokud se nezacyklí striktní strategie, nezacyklí se ani
 další redukční strategie.
\end_layout

\begin_layout Subsubsection*
Věta o normalizaci
\end_layout

\begin_layout Standard
Věta o normalizaci říká, že normální strategie je nejbezpečnější.
 Z toho plyne, že pokud se zacyklí normální strategie, zacyklí se i další
 redukční strategie.
\end_layout

\begin_layout Subsection*
Funkce vyšších řádů
\end_layout

\begin_layout Standard
Funkce vyššího řádu je taková funkce, která buď bere jako vstupní parametr,
 nebo vrací jako výsledek nějakou funkci.
 V Haskellu platí, že každou funkci, která má minimálně dva parametry, lze
 brát jako funkci (tj.
 funkce s předpisem: a -> b).
\end_layout

\begin_layout Standard
Programovací jazyk Haskell taky umožnuje tzv.
 částečnou aplikaci funkce na parametry.
 Máme například funkci 
\begin_inset Formula $volume$
\end_inset

, pro kterou platí:
\end_layout

\begin_layout Quotation
volume :: Integer -> Integer -> Integer -> Integer
\end_layout

\begin_layout Quotation

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
volume x y z = x * y * z
\end_layout

\begin_layout Standard
Díky částečné aplikaci funkce na parametry si můžeme napsat vlastní funkci
 
\begin_inset Formula $volume3x4$
\end_inset

, která bude brát pouze jeden parametr (
\begin_inset Formula $z$
\end_inset

) a bude vracet částečně aplikovanou funkci 
\begin_inset Formula $volume$
\end_inset

:
\end_layout

\begin_layout Quotation
volume3x4 :: Integer -> Integer
\end_layout

\begin_layout Quotation

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
volume3x4 = volume 3 4
\end_layout

\begin_layout Standard
Každý předpis v jazyce Haskellu lze, pokud není uvedeno explicitně, uzávorkovat
 do tvaru:
\end_layout

\begin_layout Quotation
func :: a -> (b -> (c -> (d -> ...)))
\end_layout

\begin_layout Standard
Což je ekvivalentní s:
\end_layout

\begin_layout Quotation
func :: a -> b -> c -> d -> ...
\end_layout

\begin_layout Standard
Pro funkci func platí, že bere jeden parametr a a vrací částečně aplikovanou
 funkci s předpisem:
\end_layout

\begin_layout Quotation
funcA :: b -> (c -> (d -> ...))
\end_layout

\begin_layout Standard

\series bold
Příklady funkcí vyššího řádu:
\end_layout

\begin_layout Itemize

\series bold
map
\series default
 - Funkce, která na vstupu bere transformační funkci a seznam a vrací nový
 seznam, který tak, že se transformační funkce aplikovala na každý prvek
 vstupního seznamu.
 Příklad: 
\begin_inset Formula $map\,((*)\,9)\,[1..10]\rightsquigarrow[9,18,27,36,45,54,63,72,81,90]$
\end_inset

.
\end_layout

\begin_layout Itemize

\series bold
filter
\series default
 - Funkce, která bere predikátovou funkci a seznam.
 Na výstup vrací nový seznam, který vznikl pouze s prvků vstupního seznamu,
 pro které predikát platil.
 Příklad: 
\begin_inset Formula $filter\,(>\,5)\,[1..10]\rightsquigarrow[6,7,8,9,10]$
\end_inset

.
\end_layout

\begin_layout Itemize

\series bold
foldl/foldr
\series default
 - Agregační funkce, foldl prochází seznam zleva, foldr zprava.
 Ekvivalentní funkcí pro foldl je std::accumulate (C++) nebo Aggregate (.NET
 Linq).
 Příklad: 
\begin_inset Formula $foldl\,(*)\,1\,[1..5]\rightsquigarrow120$
\end_inset

 (faktoriál z pěti).
\end_layout

\begin_layout Itemize

\series bold
flip
\series default
 - Na vstup bere binární funkci a dva argumenty, výsledkem je aplikace binární
 funkce na argumenty v obráceném pořadí.
 Příklad: 
\begin_inset Formula $flip\,(-)\,5\,2\rightsquigarrow2-5\rightsquigarrow-3$
\end_inset


\end_layout

\begin_layout Itemize

\series bold
(.)
\series default
 - Na vstup bere dvě binární funkce f, g a vstupní hodnotu x a vrací výraz
 
\begin_inset Formula $f\,(g\,x)$
\end_inset

.
 Má i infixový zápis 
\begin_inset Formula $f\,.\,g$
\end_inset

.
 Z matematického hlediska se jedná o ekvivalentní výraz pro symbol 
\begin_inset Formula $\circ$
\end_inset

 (tzn.
 
\begin_inset Formula $f\circ g$
\end_inset

).
\end_layout

\begin_layout Itemize

\series bold
binární operátory (+), (-), (*), ...
\end_layout

\begin_layout Subsection*
Lambda funkce
\end_layout

\begin_layout Standard
Lambda funkce je tzv.
 anonymní funkce (bezejmenná funkce).
 Využívá se v případech, kdy potřebujeme rychle zadefinovat novou funkci
 na 
\begin_inset Quotes eld
\end_inset

jedno použití
\begin_inset Quotes erd
\end_inset

 (kterou předáme funkci vyššího řádu).
\end_layout

\begin_layout Standard
V Haskellu má lambda funkce následující podobu: 
\begin_inset Formula $\backslash x\ldots y\rightarrow\ldots$
\end_inset

.
 Tzn.
 za lomítkem následuje nenulový (!) počet vstupních parametrů a za šipkou
 (->) tělo funkce.
 Anonymní funkce, jako každá jiná v Haskellu, musí něco vracet na výstup.
\end_layout

\begin_layout Standard
Příklady
\end_layout

\begin_layout Subsection*
Elementární programování v Haskellu
\end_layout

\begin_layout Standard
Definice agregační funkce foldl:
\end_layout

\begin_layout Quotation
foldl :: (a -> b -> a) -> a -> [b] -> a
\end_layout

\begin_layout Quotation
foldl f acc [x] = f acc x
\end_layout

\begin_layout Quotation
foldl f acc (x:y:s) = foldl (f) (f acc x) (y:s)
\end_layout

\begin_layout Standard
Pomocí foldl můžeme definovat mnoho dalších funkcí, jako například factoriál,
 hledání minima, maxima, map, filter aj.
\end_layout

\begin_layout Standard
Např.:
\end_layout

\begin_layout Quotation
let factorial n = foldl (*) 1 [1..n]
\end_layout

\begin_layout Quotation
let max (x:s) = foldl (
\backslash
acc y -> if acc > y then acc else y) x s
\end_layout

\begin_layout Quotation
let filter f s = foldr (
\backslash
y acc -> if f y then y:acc else acc) [] s
\end_layout

\begin_layout Standard
Funkci filter lze napsat kratším stylem pomocí generování seznamu pomocí
 predikátů:
\end_layout

\begin_layout Quotation
let filter' f s = [x | x <- s, f x]
\end_layout

\begin_layout Standard
Jazyk Haskell díky líné redukční strategii umožňuje tvorbu nekonečných seznamů:
\end_layout

\begin_layout Quotation
infi = 1 : infi (nekonečný seznam jedniček)
\end_layout

\begin_layout Quotation
infi = 1 : (map (+1) infi) (nekonečný seznam 1,2,3,...)
\end_layout

\begin_layout Standard
Pattern matching v Haskellu:
\end_layout

\begin_layout Quotation
factorial :: Integer -> Integer
\end_layout

\begin_layout Quotation
factorial 0 = 1
\end_layout

\begin_layout Quotation
factorial n = n * factorial (n-1)
\end_layout

\begin_layout Standard
Nebo lze použít tzv.
 pattern guardy:
\end_layout

\begin_layout Quotation
factorial :: Integer -> Integer
\end_layout

\begin_layout Quotation
factorial n 
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

| n == 0 = 1
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

| otherwise = n * factorial (n-1)
\end_layout

\begin_layout Standard
Funkce take vezme prvních n prvků ze seznamu:
\end_layout

\begin_layout Quotation
take :: Integer -> [a] -> [a]
\end_layout

\begin_layout Quotation
take 0 s = []
\end_layout

\begin_layout Quotation
take n (x:s) = (:) x $ take (n-1) s 
\end_layout

\begin_layout Standard
Pomocí Haskellu snadno napíšeme Eratosthenovo síto:
\end_layout

\begin_layout Quotation
let erath (x:s) = x:[y | y <- (erath s), y `mod` x /= 0]
\end_layout

\begin_layout Quotation
take 10 $ erath [2..] 
\begin_inset Formula $\rightsquigarrow$
\end_inset

[2,3,5,7,11,13,17,19,23,29] 
\end_layout

\begin_layout Standard
Operátor dolar umožní nejprve vypočítat pravou stranu výrazu, jedná se o
 ekvivalentní zápis s 
\begin_inset Formula $take\,10\,(erath\,[2..])$
\end_inset

.
\end_layout

\begin_layout Standard
Funkce curry bere na vstup funkci a dva parametry, parametry zabalí do dvojice
 a předá je na vstup dané funkci:
\end_layout

\begin_layout Quotation
curry (fst) 1 2 
\begin_inset Formula $\rightsquigarrow1$
\end_inset


\end_layout

\begin_layout Quotation
curry (snd) 'a' "hello" 
\begin_inset Formula $\rightsquigarrow$
\end_inset

 "hello"
\end_layout

\begin_layout Standard
Funkce zip veme dva seznamy a vrací seznam dvojic z těchto seznamů:
\end_layout

\begin_layout Quotation
zip [1..5] ['a'..'e'] 
\begin_inset Formula $\rightsquigarrow$
\end_inset

 [(1,11),(2,12),(3,13),(4,14),(5,15),(6,16),(7,17),(8,18),(9,19),(10,20)]
\end_layout

\begin_layout Standard
Zip může být definován třeba následovně:
\end_layout

\begin_layout Quotation
myzip :: [a] -> [b] -> [(a,b)]
\end_layout

\begin_layout Quotation
myzip [] _ = []
\end_layout

\begin_layout Quotation
myzip _ [] = []
\end_layout

\begin_layout Quotation
myzip (x:s) (y:t) = (x,y) : (myzip s t)
\end_layout

\begin_layout Subsubsection*
Způsoby použití funkcí v Haskellu
\end_layout

\begin_layout Itemize
Globální definice - pomocí předpisu + definice funkce
\end_layout

\begin_layout Itemize
Lokální definice - Pomocí výrazu 
\begin_inset Formula $let\ldots in\ldots$
\end_inset

 (příklad: 
\begin_inset Formula $let\,fac\,5=fac\,5\,in\,fac\,5\rightsquigarrow120$
\end_inset

), nebo pomocí 
\begin_inset Formula $where\ldots=\ldots$
\end_inset

 (příklad: test' = fiveEqFive where fiveEqFive = (5 == 5) 
\begin_inset Formula $\rightsquigarrow True$
\end_inset

)
\end_layout

\end_body
\end_document
