#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section*
Rekurzivní algoritmy
\end_layout

\begin_layout Subsection*
Rekurze
\end_layout

\begin_layout Standard
Metoda výpočtu, kdy funkce volá sebe sama.
\end_layout

\begin_layout Standard
Rekurze může být 
\series bold
přímá
\series default
 či 
\series bold
nepřímá
\series default
.
 
\end_layout

\begin_layout Standard
U 
\series bold
přímé rekurze
\series default
 platí, že funkce f volá explicitně sama sebe uvnitř definice funkce.
 
\end_layout

\begin_layout Standard

\series bold
Nepřímá rekurze
\series default
 označuje případ, kdy se f volá rekurzivně přes nějakého prostředníka (proxy),
 například druhou funkci.
\end_layout

\begin_layout Standard
Speciálním případem rekurze je tzv.

\series bold
 tail rekurze
\series default
.
 Pro ni platí, že funkce f volá sebe sama na konci definice funkce.
 Taková rekurze je lehce optimalizovatelná i za použití strojů.
 Rozumné kompilátory dokáží tail rekurzi automaticky převést na cyklus.
\end_layout

\begin_layout Standard
Každá rekurze musí mít tzv.
 ukončovací klauzuli (podmínku), která zaručuje, že se rekurze nezacyklí.
\end_layout

\begin_layout Standard
Příklady rekurzí:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
factorial :: Integer -> Integer 
\end_layout

\begin_layout Plain Layout
factorial 0 = 1
\end_layout

\begin_layout Plain Layout
factorial n = n * factorial (n-1)
\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Příklad přímé (a tail) rekurze v jazyce Haskell
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
dummySum1 :: [Integer] -> Integer 
\end_layout

\begin_layout Plain Layout
dummySum1 [n] = n
\end_layout

\begin_layout Plain Layout
dummySum1 (n:s) = n + dummySum2 s
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout
dummySum2 :: [Integer] -> Integer
\end_layout

\begin_layout Plain Layout
dummySum2 [n] = n
\end_layout

\begin_layout Plain Layout
dummySum2 (n:s) = n + dummySum1 s
\begin_inset Caption Standard

\begin_layout Plain Layout
Příklad nepřímé rekurze v jazyce Haskell
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Metoda rozděl a panuj (Divide and Conquer)
\end_layout

\begin_layout Standard
Metoda, která rekurzivně rozdělí větší problém na několik menších (stejného
 typu), které se dají pak triviálně (obvykle v konstantním čase) vyřešit.
 Celkové řešení pak vznikne složením těchto menších řešení.
\end_layout

\begin_layout Standard
Tato metoda se využívá např.
 v řadících algoritmech, například v Quicksort nebo Mergesort (viz dále).
\end_layout

\begin_layout Subsection*
Výhody a nevýhody použití rekurze
\end_layout

\begin_layout Standard
Výhody rekurze:
\end_layout

\begin_layout Itemize
Většinou kratší a intuitivnější zápis.
\end_layout

\begin_layout Itemize
U imperativních jazyků můžeme přímo používat aplikační zásobník.
\end_layout

\begin_layout Itemize
Snadná práce s rekurzivně založenými datovými strukturami (stromy, grafy,
 posloupnosti).
\end_layout

\begin_layout Standard
Nevýhody rekurze:
\end_layout

\begin_layout Itemize
U imperativních algoritmů je větší spotřeba hardwarových zdrojů (paměť,
 výpočetní čas).
\end_layout

\begin_layout Itemize
Aplikační zásobník může přetéct (např.
 rekurze se moc zanoří, dojde paměť).
\end_layout

\begin_layout Itemize
Obtížné určování asymptotické složitosti v některých případech.
\end_layout

\begin_layout Itemize
Snadno napíšeme program s exponenciální časovou složitostí (nevyužíváme-li
 jazyk s líným vyhodnocováním, např.
 Haskell)
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
int fibonacci(int n) {
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if (n == 0) return 0;
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if (n == 1) return 1;
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return fibonacci(n-2) + fibonacci(n-1);
\end_layout

\begin_layout Plain Layout
}
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
fibonacci :: Integer -> Integer
\end_layout

\begin_layout Plain Layout
fibonacci 0 = 0
\end_layout

\begin_layout Plain Layout
fibonacci 1 = 1
\end_layout

\begin_layout Plain Layout
fibonacci n = fibonacci (n-2) + fibonacci (n-1)
\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Exponenciální výpočet Fibonacciho n-tého čísla pomocí rekurze v C vs lineární
 výpočet v Haskellu
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Odstranění rekurze
\end_layout

\begin_layout Standard
Rekurzi můžeme odstranit dvěma hlavními způsoby.
 První, zaručený a vždy fungující způsob je nahrazení rekurze pomocí zásobníku.
 V principu se jedná o 
\begin_inset Quotes eld
\end_inset

emulaci
\begin_inset Quotes erd
\end_inset

 callstacku, tzn.
 do zásobníku uložíme hodnoty, předávané v jako vstupní parametr funkce
 a její návratovou hodnotu.
\end_layout

\begin_layout Standard
Druhým způsobem odstranění rekurze je nahrazení cyklem.
 Ušetříme tím lineární paměť v závislosti na délce zanoření rekurze (tzn.
 až 
\begin_inset Formula $\mathcal{O}(n)$
\end_inset

).
 Tuto metodu však nelze uplatnit na všechny typy rekurzí, pouze na rekurzi,
 která se nevětví (např.
 DFS pomocí cyklu bez zásobníku nelze vytvořit).
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
int power_rec(int base, int n) {
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if (n == 0) return 1;
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return base * power_rec(base, n-1);
\end_layout

\begin_layout Plain Layout
}
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
int power_stack(int base, int n) {
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

stack s;
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

s.push(1);
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for (int i = 0; i < n; i++) {
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

s.push(s.top() * base);
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

}
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return s.top();
\end_layout

\begin_layout Plain Layout
}
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
int power_cycle(int base, int n) {
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

int result = 1;
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for (int i = 0; i < n; i++) {
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result *= base;
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

}
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return result;
\end_layout

\begin_layout Plain Layout
}
\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Odstranění jednoduché tail rekurze pomocí zásobníku i cyklu na funkci power.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Rekurzivní řadící algoritmy
\end_layout

\begin_layout Subsubsection*
Quicksort
\end_layout

\begin_layout Standard
Efektivní řadící algoritmus založený na rekurzi a metodě rozděl a panuj,
 s nejlepší časovou složitostí 
\begin_inset Formula $\mathcal{O}(n\log n)$
\end_inset

, v případě špatné volby pivota (prvek, podle kterého třídíme další prvky)
 až 
\begin_inset Formula $\mathcal{O}(n^{2})$
\end_inset

.
 Není přirozený (není rychlejší při již částečně seřazené posloupnosti,
 bo naopak, můžeme zvolit špatného pivota) ani v základu stabilní (prohodí
 pořadí dvou prvků se stejnou hodnotou) - ovšem tu můžeme mírnou modifikací
 algoritmu dosáhnout.
 Quicksort je in-situ algoritmus (seřazuje přímo paměť, kterou dostal).
\end_layout

\begin_layout Standard

\series bold
Princip výpočtu
\series default
:
\end_layout

\begin_layout Standard
Chceme seřadit hodnoty v poli X vzestupně od nejmenšího po největší v intervalu
 A až B.
 
\end_layout

\begin_layout Standard
Na začátku si zvolíme pivota (obvykle první, prostřední nebo poslední prvek,
 ovšem existují i heuristiky pro výběr pivota).
 Máme dva indexy, jeden ukazuje na začátek A (nazveme jej 
\begin_inset Formula $I_{A}$
\end_inset

) a druhý na konec B (
\begin_inset Formula $I_{B}$
\end_inset

).
 Pomocí cyklu indexy posouváme (tzn.
 index 
\begin_inset Formula $I_{A}$
\end_inset

 zvyšujeme, index 
\begin_inset Formula $I_{B}$
\end_inset

 snižujeme), pouze pokud je na pozici 
\begin_inset Formula $I_{A}$
\end_inset

 v poli X nižší hodnota než pivot a 
\begin_inset Formula $I_{B}$
\end_inset

 vyšší nebo rovna než je pivot.
 Jinak dané prvky prohodíme.
 Pokračujeme, pokud 
\begin_inset Formula $I_{A}<I_{B}-1$
\end_inset

.
 Pivota následně vhodně zařadíme zpět do pole, mezi indexy 
\begin_inset Formula $I_{A}$
\end_inset

 a 
\begin_inset Formula $I_{B}$
\end_inset

.
\end_layout

\begin_layout Standard
Poté rekurzivně zavoláme Quicksort na pole X v intervalu A až 
\begin_inset Formula $I_{A}$
\end_inset

 a na pole v intervalu 
\begin_inset Formula $I_{B}$
\end_inset

 až B.
 Pokud interval obsahuje pouze jednu hodnotu (v intervalu leží jeden prvek),
 dále se již nezanořujeme.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
qs :: (Eq a, Ord a) => [a] -> [a]
\end_layout

\begin_layout Plain Layout
qs [] = []
\end_layout

\begin_layout Plain Layout
qs (x:s) = (qs [y | y <- s, y < x]) ++ [x] ++ (qs [y | y <- s, y >= x])
\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Quicksort-like algoritmus v Haskellu (tato implementace je od 
\begin_inset Quotes eld
\end_inset

Céčkovského
\begin_inset Quotes erd
\end_inset

 popisu trochu odlišná)
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Mergesort
\end_layout

\begin_layout Standard
Efektivní řadící algoritmus, opět funguje na metodě rozděl a panuj, který
 má vždy časovou složitost 
\begin_inset Formula $\mathcal{O}(n\log n)$
\end_inset

.
 Mergesort není v základě přirozený, ovšem tato varianta existuje.
 Řadící algoritmus je stabilní, bohužel není in-situ (potřebuje dodatečnou
 paměť 
\begin_inset Formula $\mathcal{O}(n)$
\end_inset

 pro uložení mezivýsledků).
 A proto je, na rozdíl od Quicksortu, méně používaný.
\end_layout

\begin_layout Standard

\series bold
Princip výpočtu
\series default
:
\end_layout

\begin_layout Standard
Chceme seřadit hodnoty v poli X vzestupně od nejmenšího po největší v intervalu
 A až B a máme pomocné pole Y.
\end_layout

\begin_layout Standard
Nejprve se zanoříme, a to tak, že půlíme intervaly na dva stejné velikosti
 (nebo o jedničku se lišící), až do maximální hloubky, kdy nám zbydou jednoprvko
vé intervaly.
\end_layout

\begin_layout Standard
Řazení probíhá až když se 
\begin_inset Quotes eld
\end_inset

vracíme
\begin_inset Quotes erd
\end_inset

 z rekurze, tato operace se nazývá slévání.
 Máme dva intervaly (tzn.
 dvě podsekvence) a dva indexy 
\begin_inset Formula $I_{1}$
\end_inset

 a 
\begin_inset Formula $I_{2}$
\end_inset

, každý ukazuje na začátek jednoho z intervalů.
 Pokud je hodnota na indexu 
\begin_inset Formula $I_{1}$
\end_inset

 menší než na 
\begin_inset Formula $I_{2}$
\end_inset

, vložíme ji do pomocného pole (na stejnou pozici 
\begin_inset Formula $I_{1}$
\end_inset

) a zvýšíme 
\begin_inset Formula $I_{1}$
\end_inset

 o jedničku.
 Pokud je hodnota menší nebo rovna, provedeme analogickou operaci pro index
 
\begin_inset Formula $I_{2}$
\end_inset

.
 Pokud je jeden z intervalů 
\begin_inset Quotes eld
\end_inset

vyčerpán
\begin_inset Quotes erd
\end_inset

 (tzn.
 pomocí indexerů jsme 
\begin_inset Quotes eld
\end_inset

došli
\begin_inset Quotes erd
\end_inset

 na konec sekvence), pouze překopírujeme zbývající prvky bez porovnání.
 Nakonec hodnoty z pomocného pole překopírujeme zpět, anebo pouze vyměníme
 ukazatel na pomocné a hlavní pole (záleží na implementaci).
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/mergesort.png

\end_inset


\end_layout

\begin_layout Subsection*
Vztah rekurze a matematické indukce
\end_layout

\begin_layout Standard
Pomocí matematické indukce dokazujeme 
\series bold
totální korektnost
\series default
 rekurzivních algoritmů (nebo algoritmů, jenž jsou psány ve funkcionálním
 paradigmatu).
 Pro připomenutí, pokud je algoritmus totálně korektní, tak je 
\series bold
konvergentní
\series default
 (pro hodnoty splňující vstupní podmínku se zastaví) a 
\series bold
parciálně korektní
\series default
 (pro hodnoty splňující vstupní podmínku buď cyklí a nebo skončí se správným
 výsledkem).
\end_layout

\begin_layout Subsubsection*
Matematická indukce
\end_layout

\begin_layout Standard
Matematická indunkce je jeden z typů matematického dokazování.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
Princip je následující
\series default
:
\end_layout

\begin_layout Standard
Máme bázi, která triviálně platí (ve vztahu k rekurzi se jedná o zastavovací
 klauzuli, největší zanoření rekurze).
 Dále předpokládáme, že tvrzení (konvergence, parciální korektnost) platí
 pro 
\begin_inset Formula $n$
\end_inset

 kroků, chceme dokázat, že platí i pro 
\begin_inset Formula $n+1$
\end_inset

 kroků (založeno na tvrzení: jestliže platí 
\begin_inset Formula $n$
\end_inset

 kroků, bude platit i 
\begin_inset Formula $n+1$
\end_inset

 kroků).
 Při důkazu pro 
\begin_inset Formula $n+1$
\end_inset

 kroků se snažíme rekurzi vyjádřit pomocí zápisu s 
\begin_inset Formula $n$
\end_inset

 kroky.
 Pokud se nám to povede, důkaz je korektní (zápis s 
\begin_inset Formula $n$
\end_inset

 kroky bychom mohli dále vyjádřit pomocí 
\begin_inset Formula $n-1$
\end_inset

, až bychom se dostali do báze, triviálního případu, který platí).
\end_layout

\end_body
\end_document
