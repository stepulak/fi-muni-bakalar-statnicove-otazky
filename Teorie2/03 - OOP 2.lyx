#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section*
OOP 2
\end_layout

\begin_layout Subsection*
Objektově orientované programování v imperativním jazyce (C++)
\end_layout

\begin_layout Standard
Konstruktor:
\end_layout

\begin_layout Quotation
class A { // nazev tridy
\end_layout

\begin_layout Quotation
public: // Viditelnost
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

// Pretezovani konstruktoru
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

A() = default; // Bezparametricky konstruktor v C++11
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

A(int value) {} // Parametricky konstruktor, ktery bere jeden parametr
\end_layout

\begin_layout Quotation
};
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Quotation
// Objekt muzeme instanciovat nasledovne
\end_layout

\begin_layout Quotation
A a; // Na stacku, bezparametricky konstruktor
\end_layout

\begin_layout Quotation
A a(5); // Stack, parametr
\end_layout

\begin_layout Quotation
auto a = make_unique<A>(); // Halda, RAII, bezparametr
\end_layout

\begin_layout Quotation
auto a = make_unique<A>(5); // Halda, RAII, parametr
\end_layout

\begin_layout Standard
Destruktor:
\end_layout

\begin_layout Quotation
class A {
\end_layout

\begin_layout Quotation
public:
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

~A() = default; // C++11
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

// Pro povoleni polymorfismu: virtual ~A() = default; 
\end_layout

\begin_layout Quotation
};
\end_layout

\begin_layout Standard
Metody:
\end_layout

\begin_layout Quotation
class A {
\end_layout

\begin_layout Quotation
public:
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

void foo() {} // Metoda nic nebere, nic nevraci
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

void foo(int i) {} // Pretizena metoda foo
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

void constfunc() const {} // Metoda nesmi modifikovat atributy vlastni tridy
 (mimo mutable promenne)
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

A& reference() { return *this; } // Metoda vracejici referenci na sebe
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

A& operator=(A& val) { return *this; } // Copy operator
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

A& operator=(A&& val) { return *this; } // Move operator
\end_layout

\begin_layout Quotation
private:
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

bool _value = false; // privatni atribut s inicializaci
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

static int _counter; // staticky privatni atribut
\end_layout

\begin_layout Quotation
};
\end_layout

\begin_layout Standard
Dědičnost a polymorfismus:
\end_layout

\begin_layout Quotation
class I { // interface
\end_layout

\begin_layout Quotation
public:
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

virtual ~I() {}
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

virtual void boo() = 0; // abstraktni metoda
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

virtual void foo() = 0; // abstraktni metoda
\end_layout

\begin_layout Quotation
};
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Quotation
class A : public I { // Dedicnost s viditelnosti public
\end_layout

\begin_layout Quotation
public:
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

void boo() override { } // prepsana abstraktni metoda
\end_layout

\begin_layout Quotation
}; // Chybi implementace foo(), nemuzeme vytvorit instanci
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Quotation
class B : public A { // Dedicnost s vid.
 private, tzn.
 vsechny public z A jsou private nyni
\end_layout

\begin_layout Quotation
public:
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

void foo() override { }
\end_layout

\begin_layout Quotation
};
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Quotation
// Polymorfismus
\end_layout

\begin_layout Quotation
B b;
\end_layout

\begin_layout Quotation
I& i = dynamic_cast<I&>(b); // Povoleno
\end_layout

\begin_layout Quotation
i.boo(); // Volame A::boo();
\end_layout

\begin_layout Quotation
i.foo(); // Volame B::foo();
\end_layout

\begin_layout Quotation
A& a = dynamic_cast<A&>(i); // Povoleno, dynamic runtime check
\end_layout

\begin_layout Quotation
A aa;
\end_layout

\begin_layout Quotation
dynamic_cast<B&>(aa); // runtime check error
\end_layout

\begin_layout Standard
Enkapsulace:
\end_layout

\begin_layout Quotation
class A {
\end_layout

\begin_layout Quotation
public:
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

using Vec = std::vector<int>;
\end_layout

\begin_layout Quotation
// Gettry a settery
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

const Vec& vec() const { return _vec; } // Enkapsulace, nemuzeme modifikovat
 vraceny vektor
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Vec& vec() { return _vec; } // Muzeme modifikovat vraceny vektor
\end_layout

\begin_layout Quotation
private:
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Vec _vec;
\end_layout

\begin_layout Quotation
}
\end_layout

\begin_layout Subsection*
Spolupráce objektů
\end_layout

\begin_layout Standard
Ve Smalltalku, kde každý objekt má svůj stav, komunikace probíhá skrze předávání
m zpráv.
 V imperativních jazycích je tato metoda trochu odlišná.
 Předávat informace můžeme hlavně skrze různé metody objektu, například:
\end_layout

\begin_layout Quotation
class A {
\end_layout

\begin_layout Quotation
public:
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

void sendMessage(const string& message) { _msg = message; /*Dale zpracuj
 message*/ }
\end_layout

\begin_layout Quotation
private:
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

string _msg;
\end_layout

\begin_layout Quotation
};
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Quotation
class B {
\end_layout

\begin_layout Quotation
public:
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

string getMessage() const { return 
\begin_inset Quotes eld
\end_inset

Zprava z B
\begin_inset Quotes erd
\end_inset

; }
\end_layout

\begin_layout Quotation
};
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Quotation
class C {
\end_layout

\begin_layout Quotation
private:
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

A a;
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

B b;
\end_layout

\begin_layout Quotation
public:
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

void changeMessages();
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Quotation
};
\end_layout

\begin_layout Quotation
// Predavani neprimo
\end_layout

\begin_layout Quotation
A a;
\end_layout

\begin_layout Quotation
B b;
\end_layout

\begin_layout Quotation
a.sendMessage(b.getMessage());
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Quotation
// Skrz proxy
\end_layout

\begin_layout Quotation
C c;
\end_layout

\begin_layout Quotation
c.changeMessages();
\end_layout

\begin_layout Standard
Jeden objekt může držet instance druhých a následně volat jejich metody:
\end_layout

\begin_layout Quotation
class OFile {
\end_layout

\begin_layout Quotation
public:
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

OFile& operator<<(const string& m) { /*zapis do souboru*/ } // pretizeny
 operator
\end_layout

\begin_layout Quotation
};
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Quotation
class IFile {
\end_layout

\begin_layout Quotation
public:
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

IFile& operator>>(string& m) { /* precti ze souboru */ }
\end_layout

\begin_layout Quotation
};
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Quotation
class FileLineSwapper {
\end_layout

\begin_layout Quotation
public:
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

void SwapLine() { string s; ifile >> s; ofile << s; }
\end_layout

\begin_layout Quotation
private:
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

OFile ofile(...);
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

IFile ifile(...);
\end_layout

\begin_layout Quotation
};
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Quotation
FileLineSwapper fls;
\end_layout

\begin_layout Quotation
fls.SwapLine();
\end_layout

\begin_layout Quotation
...
\end_layout

\begin_layout Standard
Nebo předávat objekty skrze reference v rámci metod nebo zapisovat přímo
 do atributů (nicméně porušujeme zapouzdření):
\end_layout

\begin_layout Standard
class B {
\end_layout

\begin_layout Standard
public:
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

bool condition = false;
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

string getMessage() const { return 
\begin_inset Quotes eld
\end_inset

zprava z B
\begin_inset Quotes erd
\end_inset

; }
\end_layout

\begin_layout Standard
};
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
class A {
\end_layout

\begin_layout Standard
public:
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

void useObj(B& b) { b.getMessage(); b.condition = true; }
\end_layout

\begin_layout Standard
};
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
A a; B b;
\end_layout

\begin_layout Standard
a.useObj(b);
\end_layout

\begin_layout Subsection*
Událostmi řízené programování
\end_layout

\begin_layout Standard
Neboli event driven programming, je speciální programovací paradigma, kdy
 se volají uživatelsky (programátorsky) definované 
\series bold
callback
\series default
 funkce pro různé události (například stisknutí klávesnice, kliknutí na
 myši, připojení USB zařízení apod.).
\end_layout

\begin_layout Standard
Architektura event-driven aplikace je většinou následující: Máme jeden cyklus,
 který ověřuje různé stavy (tj.
 pokud chci znát, jestli se stiskla nějaká klávesa, zeptám se operačního
 systému).
 Pokud daný stav je platný a existuje pro něj callback funkce, zavolám ji
 a předám parametr stisklé klávesy.
\end_layout

\begin_layout Standard
Příklad:
\end_layout

\begin_layout Quotation
while(app.Running()) {
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

int key = OS.PressedKey();
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if (key >= 0) {
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

keyCallback.Invoke(key);
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

}
\end_layout

\begin_layout Quotation
}
\end_layout

\begin_layout Standard
Event-driven programování se většinou používá při vývoji GUI aplikací (WinForms,
 WPF).
 Programátor si pouze napíše obslužné funkce pro různé eventy aplikační
 logiky, které potřebuje zpracovat (stisknutí tlačítka v menu, posun vertikálníh
o scrollbaru myší apod.).
 
\begin_inset Quotes eld
\end_inset

Jádro
\begin_inset Quotes erd
\end_inset

 aplikace již řeší samo, zda-li nějaká definovaná událost nastala.
\end_layout

\begin_layout Standard
Callbacky můžeme definovat například i jako lambda funkce:
\end_layout

\begin_layout Quotation
App.SetCallback(CallbackType::MouseDown, 
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

[&](int mouseX, int mouseY) { 
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

/* zpracuj mys */
\end_layout

\begin_layout Quotation
});
\end_layout

\begin_layout Subsection*
Vyjímky
\end_layout

\begin_layout Standard
Vyjímky představují mechanismus, jak jednoduše a poměrně rychle (dnes již
 s konstantní časovou složitostí) zpracovávat chybové stavy a neočekávané
 stavy programu.
 Při zpracování vyjímek používáme hlavně dva nejdůležitější konstrukty,
 a to je 
\series bold
throw
\series default
 a
\series bold
 try-catch
\series default
.
\end_layout

\begin_layout Standard
Klíčové slovo throw 
\begin_inset Quotes eld
\end_inset

vyhodí vyjímku
\begin_inset Quotes erd
\end_inset

, tj.
 nějaký objekt (či primitivní hodnotu).
 Při vyhození tato vyjímka 
\begin_inset Quotes eld
\end_inset

probublává
\begin_inset Quotes erd
\end_inset

 (při poderní implementaci vyjímek toto není pravda) stackem zpátky, než
 narazí na konstrukt try-catch, který zachycuje příslušný typ vyjímky.
 Pokud na konstrukt nenarazí a 
\begin_inset Quotes eld
\end_inset

probublá
\begin_inset Quotes erd
\end_inset

 celým programem, tak skončí i program s danou vyjímkou.
\end_layout

\begin_layout Standard
Příklad:
\end_layout

\begin_layout Quotation
try {
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

FuncThatThrow();
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

// Zde je kod, ktery se nevykona
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

int a = 5;
\end_layout

\begin_layout Quotation
}
\end_layout

\begin_layout Quotation
catch (const exception& e) {
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

 cout << e.what() << endl;
\end_layout

\begin_layout Quotation
}
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Quotation
void FuncThatThrow() {
\end_layout

\begin_layout Quotation
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

throw runtime_error(
\begin_inset Quotes eld
\end_inset

error
\begin_inset Quotes erd
\end_inset

); // runtime_error je potomek exception
\end_layout

\begin_layout Quotation
}
\end_layout

\begin_layout Standard
Implementace vyjímek: dříve pomocí longjmp/setjmp instrukcí, dnes pomocí
 Ithanium Exception ABI (kompilátor generuje tabulku callbacků pro každé
 místo v programu, kde může vyjímka vzniknout).
\end_layout

\begin_layout Standard
Příklady vyjímek:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/cpp_exceptions.jpg
	lyxscale 50
	scale 50

\end_inset


\end_layout

\end_body
\end_document
