#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section*
Práce s pamětí
\end_layout

\begin_layout Subsection*
Hierarchie pamětí
\end_layout

\begin_layout Enumerate

\series bold
Primární paměti
\series default
 - velmi rychlé, energeticky závislé (po vypnutí se vymaže obsah).
 Příklady: Registry, cache, RAM.
\end_layout

\begin_layout Enumerate

\series bold
Sekundární paměti 
\series default
- středně rychlé, energeticky nezávislé, většinou velká kapacita (oproti
 RAM).
 Příklady: disky (HDD, SSD).
\end_layout

\begin_layout Enumerate

\series bold
Terciální paměti 
\series default
- Pomalé, energeticky nezávislé, levné a s velkou kapacitou.
 Příklady: CD/DVD disky, magnetické pásky, floppy disky.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/memory_hierarchy.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Subsubsection*
Registry
\end_layout

\begin_layout Standard
Paměťové místo uvnitř procesoru.
 Nejrychlejší paměť.
 Používají se pro ukládání hodnot, se kterými potom pracují CPU instrukce.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Příklady registrů (x86):
\end_layout

\begin_layout Itemize

\series bold
obecné
\series default
 - AX, BX, CX, DX, SP, BP, apod.
\end_layout

\begin_layout Itemize

\series bold
speciální
\series default
 - IP, EFLAGS, apod.
\end_layout

\begin_layout Subsubsection*
Cache
\end_layout

\begin_layout Standard
Cache nebo-li vyrovnávací paměť, slouží k vyvažování rozdílu rychlosti registrů
 a RAM tak, že se automaticky načítají do cache hodnoty na paměťových adresách,
 které budou v blízké době pravděpodobně použity.
 Implementace pomocí LRU (Least Recent Unit).
 Cache je několik úrovní: L1 (nejblíže procesoru, několik KB), L2, L3 (dnes
 desítky MB).
\end_layout

\begin_layout Subsubsection*
Operační paměť (RAM = random access memory)
\end_layout

\begin_layout Standard
Energeticky nestálá, volatilní.
 Jedná se o read/write memory.
 K procesoru připojená pomocí CPU sběrnice.
 Nutné periodicky obnovovat, tvořeny buňkami typu DRAM (dynamic random access
 memory; kondenzátor).
 Dnešní typy DDR (Double Data Rate; 4), frekvence v řádu několika GHz.
\end_layout

\begin_layout Subsubsection*
Magnetické disky
\end_layout

\begin_layout Standard
V principu se jedná o velké, jednodimenzionální pole.
 Bloky jsou umístěny sekvenčně, směrem od středu do krajů disku.
 Chceme minimalizovat pohyb čtecí hlavičky, například pomocí FCFS (First
 Come First Served), SSTF (Shortest Seek Time First; podobný scheduleru
 SJB).
\end_layout

\begin_layout Subsubsection*
RAID
\end_layout

\begin_layout Standard
Technologie, která se využívá při zapojení dvou a více disků.
 Mimo RAID 0 se jedná o technologie, které umožňují redundanci a zálohu
 dat.
\end_layout

\begin_layout Itemize

\series bold
RAID 0 
\series default
- Rozšíření diskového pole, zrychlení čtení a zápisu (rozdělení bloků dat
 na jiné disky - block stripping).
\end_layout

\begin_layout Itemize

\series bold
RAID 1 
\series default
- Mirroring (IO), při výpadku dokážeme nahradit druhým.
\end_layout

\begin_layout Itemize

\series bold
RAID 5
\series default
 - Block stripping (rychlejší IO), počítána bitová parita (na různých discích).
\end_layout

\begin_layout Itemize

\series bold
RAID 6 
\series default
- RAID 5 se samoopravovacími kódy (lichá, sudá parita, hammingovy opravné
 kódy).
 Řeší výpadek i dvou a více disků.
\end_layout

\begin_layout Subsection*
Správa paměti
\end_layout

\begin_layout Standard
Každý proces, který běží, je umístěn v paměti.
 Pro tuto paměť máme několik požadavků:
\end_layout

\begin_layout Itemize

\series bold
Možnost relokace programů
\series default
 - Programátor neví, ve které FAP bude jeho program spuštěn.
\end_layout

\begin_layout Itemize

\series bold
Potřeba ochrana paměti
\series default
 - proces A nemůže přistupovat k vnitřní paměti procesu B.
\end_layout

\begin_layout Itemize

\series bold
Požadavky na sdílení
\series default
 - sdílení paměti mezi X procesů.
\end_layout

\begin_layout Itemize

\series bold
Logické uspořádání paměti
\series default
 - execute-only část, datová část, stack, heap.
\end_layout

\begin_layout Subsection*
Adresový prostor
\end_layout

\begin_layout Standard
Souhrn adresovatelných buněk v paměti.
 
\end_layout

\begin_layout Itemize

\series bold
FAP (Fyzický adresovatelný prostor)
\series default
 - fyzický paměťový prostor operační paměti (zde se bavíme o RAM).
 Kapacita je dána šířkou paměťové sběrnice.
 Rozdělená na rezidentní část OS a sekci pro uživatelské programy.
\end_layout

\begin_layout Itemize

\series bold
LAP (Logický adresovatelný prostor)
\series default
 - logický prostor operační paměti.
 Používaný v době provádění programu.
 Obvykle platí, že LAP > FAP.
 Omezena šířkou paměti v instrukci.
\end_layout

\begin_layout Subsubsection*
Vázání LAP na FAP
\end_layout

\begin_layout Itemize

\series bold
Statické
\series default
 - Známé během kompilace (absolutní program; nepřenositelné) nebo v době
 zavádění.
 Používáme u jednoduchých, vestavěných systémech.
\end_layout

\begin_layout Itemize

\series bold
Dynamické
\series default
 - Program sestavíme pro LAP, program při spuštění zavede LAP z FAP, proces
 může měniž LAP během různých zavádění, nutná HW podpora.
\end_layout

\begin_layout Subsubsection*
Fragmentace
\end_layout

\begin_layout Standard
Problém frangmentace - celkové množství paměti je sice větší než požadované
 množství paměti, avšak neexistuje taková díra (blok volné paměti ve FAP),
 aby zaplnila požadavak na paměť.
 Řešení fragmentace - 
\series bold
swapping
\series default
, nebo
\series bold
 stránkování paměti
\series default
.
\end_layout

\begin_layout Subsubsection*
Metoda přidělování paměti statické a proměnlivé délky
\end_layout

\begin_layout Itemize

\series bold
First-fit 
\series default
- První dostatečně velký úsek paměti
\end_layout

\begin_layout Itemize

\series bold
Best-fit
\series default
 - Nejmenší dostatečně velký úsek paměti.
\end_layout

\begin_layout Itemize

\series bold
Worst-fit
\series default
 - největší volný usek paměti.
\end_layout

\begin_layout Subsection*
Virtualizace paměti
\end_layout

\begin_layout Standard
LAP dokážeme nelineárně mapovat na různé části FAP (segmentace, stránkování).
 Ač se paměť pomocí zápisu logických adres může zdát souvislá, ve FAP to
 tak nemusí být.
 Díky virtualizaci paměti dokážeme taky řešit problém nedostatku paměti
 ve FAP tak, že mapujeme LAP i na jiné fyzické adresové prostory než je
 operační paměť (například disk).
\end_layout

\begin_layout Subsubsection*
Segmentace
\end_layout

\begin_layout Standard
LAP je rozdělená do tzv.
 segmentů, což jsou lineární spojité bloky paměti.
 Každý proces je rozdělen do samostatných segmentů a obsahuje na ně ukazatele
 (registry - Stack Segment (SS), Code Segment (CS), Data Segment (DS)).
\end_layout

\begin_layout Standard
Převod z segmentované LAP (
\series bold
segment + offset
\series default
) do FAP (adresa) pomocí tzv.

\series bold
 Segment Table
\series default
, obsahuje
\series bold
 base pointer
\series default
 (ukazatel na začátek segmentu) a 
\series bold
limit
\series default
 (velikost segmentu).
 Snadná detekce přístupu mimo paměť procesu.
 Problém fragmentace paměti, vyřešeno až pomocí stránkování.
\end_layout

\begin_layout Subsubsection*
Stránkování
\end_layout

\begin_layout Standard
FAP je rozdělen do rámců pevné délky (většinou 4KB), LAP do stránek, jejiž
 délka odpovídá velikosti rámců.
 LAP může reprezentovat lineárně dlouhou, spojitou paměť, avšak FAP může
 být fragmentovaná (tak řešíme fragmentaci paměti).
 Pomocí 
\series bold
Page Table
\series default
 a hardwarového zařízení 
\series bold
MMU
\series default
 (memory management unit) mapujeme stránky do rámců (využití
\series bold
 TLB - Translation Lookaside Buffer
\series default
 pro rychlejší překlad).
\end_layout

\begin_layout Standard
Virtuální adresa vypadá následovně:
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Page directory
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Page table
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Offset
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Page table je lineární tabulka (1024 položek v x86), která obsahuje ukazatel
 na tabulku s dalšími 1024 položkami.
 Je-li stránka 4KB, můžeme tak adresovat až 4GB RAM v x86.
\end_layout

\begin_layout Standard
Výběr rámců a stránek je dynamický proces, vytváří se až v době nutnosti
 (alokace nové paměti apod.).
\end_layout

\begin_layout Paragraph*
Co se stane, když potřebujeme další stránky a došly nám rámce v operační
 paměti?
\end_layout

\begin_layout Standard
V rámci procesu máme dvě možnosti - odebereme stránku procesu, který nedostatek
 paměti způsobil (lokální výběr) a nebo jinému procesu (globální výběr).
\end_layout

\begin_layout Standard
Tyto stránky se přesunou na disk.
 Pokud do nich bylo zapsáno (
\series bold
dirty bit
\series default
 je roven 1), je nutné překopírovat i obsah rámce (
\series bold
swapování
\series default
).
 Pokud je chceme znovu využít, je potřeba je opět přenésení do operační
 paměti.
\end_layout

\begin_layout Standard

\series bold
Máme několik algoritmů pro výběr oběti:
\end_layout

\begin_layout Itemize

\series bold
FIFO
\series default
 - vyřazení stránky, která je v paměti nejdéle.
 Nepoužitelné v praxi.
 
\end_layout

\begin_layout Itemize

\series bold
LRU
\series default
 - vyřazení v paměti, která je nejméně používaná.
 Náročná implementace a na CPU (kvadratická složitost).
\end_layout

\begin_layout Itemize

\series bold
NRU
\series default
 - zjednodušení LRU, vybereme první stránku z paměti, která nebyla použita
 (podle dirty bitu).
\end_layout

\end_body
\end_document
